#!/usr/bin/env Rscript

options(repos=c("http://cran.us.r-project.org"))

if (interactive()) {

  #library(colorout)

  # zap() removes all variables in current session
  # from http://r.789695.n4.nabble.com/How-to-Clear-all-variables-stored-in-current-and-previous-sessions-td873058.html
  zap <- function() rm(list=ls(all=TRUE))

  # return columns "like" second argument from
  # dataframe in first column. saves on typing
  #
  # df2 <- colslike('this', df)
  colslike <- function(l, df) df[, grep(l, colnames(df))]

  # get first row
  first <- function(x) x[1,]


  ## Phyloseq Stuff

  # return a phyloseq object w the top N taxa
  select_top_taxa <- function(phy, n) {
    top.taxa <- names(sort(taxa_sums(phy), TRUE)[1:n])
    prune_taxa(top.taxa, phy)
  }

  # Multiple plot function
  #
  # ggplot objects can be passed in ..., or to plotlist (as a list of ggplot objects)
  # - cols:   Number of columns in layout
  # - layout: A matrix specifying the layout. If present, 'cols' is ignored.
  #
  # If the layout is something like matrix(c(1,2,3,3), nrow=2, byrow=TRUE),
  # then plot 1 will go in the upper left, 2 will go in the upper right, and
  # 3 will go all the way across the bottom.
  #
  multiplot <- function(..., plotlist=NULL, file, cols=1, layout=NULL) {
    require(grid)

    # Make a list from the ... arguments and plotlist
    plots <- c(list(...), plotlist)

    numPlots = length(plots)

    # If layout is NULL, then use 'cols' to determine layout
    if (is.null(layout)) {
      # Make the panel
      # ncol: Number of columns of plots
      # nrow: Number of rows needed, calculated from # of cols
      layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),
                      ncol = cols, nrow = ceiling(numPlots/cols))
    }

  if (numPlots==1) {
      print(plots[[1]])

    } else {
      # Set up the page
      grid.newpage()
      pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))

      # Make each plot, in the correct location
      for (i in 1:numPlots) {
        # Get the i,j matrix positions of the regions that contain this subplot
        matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))

        print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,
                                        layout.pos.col = matchidx$col))
      }
    }
  }

  # Lines added by the Vim-R-plugin command :RpluginConfig (2014-Aug-31 12:48):
  if(interactive()){
      if(nchar(Sys.getenv("DISPLAY")) > 1)
          options(editor = 'gvim -f -c "set ft=r"')
      else
          options(editor = 'vim -c "set ft=r"')
      library(colorout)

      # c(formatting, bg, fg)
      x <- setOutputColors(normal = 0,
                      number = c(0, 0, 0),
                      negnum = c(0, 0, 1),
                      date = c(4, 0, 4),
                      string = c(0, 0, 5),
                      const = c(7, 0, 0),
                      verbose=FALSE)
                      

      # library(setwidth)
      library(vimcom)
      # See R documentation on Vim buffer even if asking for help in R Console:
      if(Sys.getenv("VIM_PANE") != "")
          options(pager = vim.pager)
  }

  cat("\014")

  # this will probably break everything but oh well, I'm sick of the default
  # ggplot2 theme!
#  library(ggthemr)
#  ggthemr("fresh")

}
