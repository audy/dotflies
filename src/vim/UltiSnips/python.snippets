snippet ##
#
# $0
#
endsnippet


snippet #
#!/usr/bin/env python
endsnippet

snippet ifmain
if __name__ == '__main__':
    main()
endsnippet

snippet def
def $1($2):
    ''' $1 '''

    $0
endsnippet

snippet script
#!/usr/bin/env python

import argparse
import logging

def parse_args():
    ''' return arguments
        >>> args = parse_args()
    '''

    parser = argparse.ArgumentParser()
    parser.add_argument('--log', default='/dev/stderr',
						help='log file (default=stderr)')
    parser.add_argument('--output', default='/dev/stdout')
    return parser.parse_args()


def main():
    '''
        >>> main() # stuff happens
    '''

    args = parse_args()
	logging.basicConfig(filename=args.log, level=logging.INFO)

	$0

if __name__ == '__main__':
    main()
endsnippet

# start an interative repl with current local variables
snippet repl
import code
code.interact(local=locals())
endsnippet

# bioinformatics

snippet iter_gff
def iter_gff(handle):
    ''' yield gff items as hashes '''

    for line in handle:
        if line.startswith('#'):
            continue

        fields = line.strip().split("\t")

        dat = {
                'contig': fields[0],
                'source': fields[1],
                'feature': fields[2],
                'start': fields[3],
                'end': fields[4],
                'score': fields[5],
                'strand': field[6],
                'frame': field[7],
                'attribute': field[8]
                }

        yield dat
endsnippet

snippet seqio
records = SeqIO.parse(handle, 'fasta')
endsnippet
