
snippet pdb
import pdb; pdb.set_trace()
endsnippet

# I always forget how to do this in Python
# can you blame me?
snippet flatten
[item for sublist in $0 for item in sublist]
endsnippet


snippet ##
#
# $0
#
endsnippet


snippet #
#!/usr/bin/env python3
endsnippet

snippet ifmain
if __name__ == '__main__':
    main()
endsnippet

snippet def
def $1($2):
    '''
	>>> $1($2)

	'''

    $0
endsnippet

snippet script
#!/usr/bin/env python

import argparse

def parse_args():
    '''
	return arguments
    >>> args = parse_args()

    '''

    parser = argparse.ArgumentParser()
    parser.add_argument('--output', default='/dev/stdout')
	parser.add_argument('--input', default='/dev/stdin')
    return parser.parse_args()


def main():
    '''
        >>> main() # stuff happens
    '''

    args = parse_args()

if __name__ == '__main__':
    main()
endsnippet

# start an interative repl with current local variables
snippet repl
import code
code.interact(local=locals())
endsnippet

# bioinformatics

snippet iter_gff
def iter_gff(handle):
    ''' yield gff items as hashes '''

    for line in handle:
        if line.startswith('#'):
            continue

        fields = line.strip().split("\t")

        dat = {
                'contig': fields[0],
                'source': fields[1],
                'feature': fields[2],
                'start': fields[3],
                'end': fields[4],
                'score': fields[5],
                'strand': field[6],
                'frame': field[7],
                'attribute': field[8]
                }

        yield dat
endsnippet

snippet seqio
records = SeqIO.parse(handle, 'fasta')
endsnippet


snippet parser
parser.add_argument('--$1')
endsnippet

snippet logging
logging.basicConfig(filename='/dev/stderr', level=logging.INFO)
endsnippet

snippet download
import urllib.request
request.urlretrieve('url', 'filename')
endsnippet

snippet iter_sam
def iter_sam(handle):
    '''
    As defined by:
    https://samtools.github.io/hts-specs/SAMv1.pdf
    '''

    for line in handle:
        if line[0] == '@':
            continue
        else:
            line = line.strip().split("\t")
            yield {
                'qname': line[0],
                'flag': line[1],
                'rname': line[2],
                'pos': line[3],
                'mapq': line[4],
                'cigar': line[5],
                'rnext': line[6],
                'pnext': line[7],
                'tlen': line[8],
                'seq': line[9],
                'qual': line[10]
            }
endsnippet
