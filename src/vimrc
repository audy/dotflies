" vimrc
"
" austin g. davis-richardson
"
" most of the things here are taken from others
"

set shell=bash\ -i

set mouse=vin " lazy man

filetype off
set nocompatible

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

" let Vundle manage Vundle, required
Plugin 'gmarik/Vundle.vim'

" YAY! PLUGINS!
" PLUGGGINNS!!!

Plugin 'Lokaltog/vim-easymotion'
Plugin 'SirVer/ultisnips'
Plugin 'altercation/vim-colors-solarized'
Plugin 'bling/vim-airline'
Plugin 'digitaltoad/vim-jade'
Plugin 'godlygeek/tabular'
Plugin 'jcf/vim-latex'
Plugin 'jcfaria/Vim-R-plugin'
Plugin 'junegunn/vim-emoji'
Plugin 'kchmck/vim-coffee-script'
Plugin 'kien/ctrlp.vim'
Plugin 'mattn/gist-vim'
Plugin 'mattn/webapi-vim'
Plugin 'mhinz/vim-tmuxify'
Plugin 'nathanaelkane/vim-indent-guides'
Plugin 'scrooloose/nerdcommenter'
Plugin 'scrooloose/nerdtree'
Plugin 'suan/vim-instant-markdown'
Plugin 'thoughtbot/vim-rspec'
Plugin 'tomtom/tlib_vim'
Plugin 'tpope/vim-fugitive'
Plugin 'tpope/vim-markdown'
Plugin 'tpope/vim-surround'
Plugin 'uguu-org/vim-matrix-screensaver'
Plugin 'vim-ruby/vim-ruby'
Plugin 'vim-scripts/DrawIt'
Plugin 'vim-scripts/sketch.vim'

call vundle#end()            " required
filetype plugin indent on    " required

" solarized
set t_Co=256
syntax enable

" default is light
if $ITERM_PROFILE == 'dark'
  set background=dark
else
  set background=light
endif

colorscheme solarized

" ctrl-P stuff
let g:ctrlp_max_files=0 
set wildignore+=*/tmp/*,*.so,*.swp,*.zip,*/data/*

" emoji
set completefunc=emoji#complete

" disable visual bell in MacVim
autocmd! GUIEnter * set vb t_vb=
set noerrorbells 
set novisualbell
set t_vb=

" disable GUI scrollbar in MacVim
set guioptions-=L
" custom filetypes

au BufNewFile,BufRead *.qsub set filetype=sh

"
" misc.
"

set undodir=~/.vim/tmp/undo//     " undo files
set backupdir=~/.vim/tmp/backup// " backups

" xxx if you edit sensitive documents, they will be stored here in plain-text!!
set directory=~/.vim/tmp/swap//   " swap files

" Make those folders automatically if they don't already exist.
"if !isdirectory(expand(&undodir))
"    call mkdir(expand(&undodir), "p")
"endif
"if !isdirectory(expand(&backupdir))
"    call mkdir(expand(&backupdir), "p")
"endif
"if !isdirectory(expand(&directory))
"    call mkdir(expand(&directory), "p")
"endif

set backup
set noswapfile

set autoindent
set tabstop=4
set softtabstop=2
set shiftwidth=2
set expandtab
set wrap
set textwidth=80

set encoding=utf-8

set undofile
set undoreload=10000

set ttyfast

set showbreak=↪

set autowrite
set autoread

set shiftround
set colorcolumn=+1


set ruler
set rnu
set numberwidth=5


" Trailing whitespace
" Only shown when not in insert mode so I don't go insane.
" xxx not working!
augroup trailin
  au!
  au InsertEnter * :set listchars-=trail:⌴
  au InsertLeave * :set listchars+=trail:⌴
augroup END

" return to same line when you reopen vim
augroup line_return
  au!
  au BufReadPost *
    \ if line("'\"") > 0 && line("'\"") <= line("$") |
    \     execute 'normal! g`"zvzz' |
    \ endif
augroup END

" leader/local leader
let mapleader = " "
let maplocalleader = ","

" allow backspacing over everything in insert mode
set backspace=indent,eol,start

" Don't try to highlight lines longer than 800 characters.
set synmaxcol=800

set notimeout
set ttimeout
set ttimeoutlen=10

" save when focus lost
au FocusLost *:silent! wall

"
" Shortcuts
"

" Clean trailing whitespace
nnoremap <leader>ww mz:%s/\s\+$//<cr>:let @/=''<cr>`z

" Kill window
nnoremap K :q<cr>

" Wrap
nnoremap <leader>W :set wrap!<cr>

" the fucking clipboard
set clipboard=unnamed


" Copying text to the system clipboard.
"
" For some reason Vim no longer wants to talk to the OS X pasteboard through "*.
" Computers are bullshit.
" (thanks steve losh)

"function! g:FuckingCopyTheTextPlease()
"    let old_z = @z
"    normal! gv"zy
"    call system('pbcopy', @z)
"    let @z = old_z
"endfunction
"noremap <leader>p :silent! set paste<CR>"*p:set nopaste<CR>
"" noremap <leader>p mz:r!pbpaste<cr>`z
"vnoremap <leader>y :<c-u>call g:FuckingCopyTheTextPlease()<cr>

" Clean trailing whitespace
nnoremap <leader>ww mz:%s/\s\+$//<cr>:let @/=''<cr>`z

" Formatting, TextMate-style
nnoremap Q gqip
vnoremap Q gq

" Reformat line.
nnoremap ql gqq

" Select (charwise) the contents of the current line, excluding indentation.
" " Great for pasting Python lines into REPLs.
nnoremap vv ^vg_

"
" Searching & Movement
"

" Use sane regexes.
nnoremap / /\v
vnoremap / /\v

" Keep search matches in the middle of the window.
nnoremap n nzzzv
nnoremap N Nzzzv

" Same when jumping around
nnoremap g; g;zz
nnoremap g, g,zz
nnoremap <c-o> <c-o>zz

" Easier to type, and I never use the default behavior.
noremap H ^
noremap L $
vnoremap L g_

" enable just enough folding to annoy me if
" I nest too deeply
set foldlevelstart=6

nnoremap zO zczO


"
" Plugins
"

" CtrlP
let g:ctrlp_map = '<c-p>'
let g:ctrlp_cmd = 'CtrlP'

" tmuxify
let g:tmuxify_pane_split = '-v' " start vertical pane

"
" Language-specific settings
"

" Markdown

autocmd BufNewFile,BufReadPost *.md set filetype=markdown

let g:markdown_fenced_languages = ['css', 'javascript', 'python', 'ruby', 'xml']

" can't figure out how to get markdown folding working anyway...
let g:vim_markdown_frontmatter=1
let g:vim_markdown_initial_foldlevel=1

" Go
au BufRead,BufNewFile *.go set filetype=go

" Ruby

" RSpec.vim
let g:rspec_runner = "os_x_iterm"

" RSpec.vim mappings
map <Leader>t :call RunCurrentSpecFile()<CR>
map <Leader>s :call RunNearestSpec()<CR>
map <Leader>l :call RunLastSpec()<CR>
map <Leader>a :call RunAllSpecs()<CR>

" R

"" vim-r-plugin
let vimrplugin_r_path='/usr/local/bin'
let vimrplugin_vim_wd = 1 " Start vim in vim's working directory not buffer's
let vimrplugin_assign = 0 " don't automatically convert underscores to <-
let vimrplugin_r_args = "--no-save --quiet"

fun! s:DetectRscript()
  if tolower(getline(1)) == '#!/usr/bin/env rscript'
    set ft=R
  endif
endfun

vmap <Space> <Plug>RDSendSelection
nmap <Space> <Plug>RDSendLine

autocmd BufNewFile,BufRead * call s:DetectRscript()

" Lines added by the Vim-R-plugin command :RpluginConfig (2014-Aug-31 12:48):
filetype plugin on

" mini-plugin for inserting electrophoresis files into current markdown and copy
" image to /public/images/gels/
" I use this for my lab notebook.

"function CopyGel(path)
  "let basename=expand('%:t')
  "let fullpath=expand('%:p')
  "echo "cp " + fullpath + " " + basename
"endfunction
