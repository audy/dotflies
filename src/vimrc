" stfu every plugin that uses python3
if has('python3')
  silent! python3 1
endif

"
" The Very Basics
"

set conceallevel=2

" load language-specific files in ~/.vim/ftpplugin/$language.vim
filetype plugin on

set nocompatible
set encoding=utf-8

" leader/local leader
let mapleader = " "
let maplocalleader = ","

syntax enable
set synmaxcol=800 " avoid syntax highlighting on large lines
set t_Co=256

set noerrorbells
set novisualbell

" disable visual bell in MacVim
autocmd! GUIEnter * set vb t_vb=

set autoindent
set shiftwidth=2
set softtabstop=2
set tabstop=2

nnoremap q :q<cr> " kill window with q

set backspace=indent,eol,start " backspace over anything

set expandtab " expand tabs to spaces
set nosmarttab " no tabs to begin with
set nowrap " dont autowrap lines

set mouse=a

set clipboard=unnamed " use system clipboard

" use version control for version control
set autowrite
set autoread

set backup
set noswapfile

set ttyfast " I think this is turbo mode?
set number

" undo
set undodir=~/.vim/tmp/undo//     " undo files
set backupdir=~/.vim/tmp/backup// " backups
set directory=~/.vim/tmp/swap//   " swap files
set undofile
set undoreload=10000

" clean trailing whitespace
nnoremap <leader>ww mz:%s/\s\+$//<cr>:let @/=''<cr>`z

" return to same line when you reopen vim
augroup line_return
  au!
  au BufReadPost *
    \ if line("'\"") > 0 && line("'\"") <= line("$") |
    \     execute 'normal! g`"zvzz' |
    \ endif
augroup END

"
" Search
"
set incsearch " use incremental searching
set ic " base case sensitive, unless not
set smartcase " be case insensitive, or don't


" highlight pesky invisible chars
syntax match nonascii "[^\x00-\x7F]"
highlight nonascii guibg=Red ctermbg=2

" custom file extensions
au BufNewFile,BufRead *.coffee set filetype=coffeescript
au BufNewFile,BufRead *.jbuilder set filetype=ruby
au BufNewFile,BufRead *.ts set filetype=typescript
au BufNewFile,BufRead *.go set filetype=go
au BufNewFile,BufReadPost *.md set filetype=markdown

" always use system ruby
let g:ruby_path = ['/usr/local/bin/ruby', '/usr/bin/ruby']

"
" Time For Plugins!
"

call plug#begin('~/.vim/plugged')

Plug 'vim-syntastic/syntastic'

" general
Plug 'haishanh/night-owl.vim'
Plug 'kien/ctrlp.vim'
Plug 'tpope/vim-surround' " da(
Plug 'faceleg/delete-surrounding-function-call.vim' " dsf
Plug 'SirVer/ultisnips' " UltiSnipEdit
Plug 'justinmk/vim-sneak' " s{char}{char} to sneak around
Plug 'simnalamburt/vim-mundo' " F5 for undo tree

" py
Plug 'vim-python/python-syntax', { 'for': 'python' }
Plug 'psf/black', { 'branch': 'stable' }
Plug 'nvie/vim-flake8', { 'for': 'python' }
Plug 'Glench/Vim-Jinja2-Syntax', { 'for': 'python' }
Plug 'prettier/vim-prettier', { 'do': 'yarn install', 'branch': 'release/0.x', 'for': 'typescript' }


" js
Plug 'leafgarland/typescript-vim', { 'for': 'ts' }
Plug 'peitalin/vim-jsx-typescript', { 'for': 'ts' }
Plug 'mxw/vim-jsx', { 'for': 'jsx' }

Plug 'itchyny/lightline.vim'

call plug#end()

set laststatus=2

"
" Plugin Settings
"

" syntastic
let g:syntastic_python_checkers = ['flake8', 'black', 'mypy']


" mundo -- opens undo tree

nnoremap <F5> :MundoToggle<CR>

" autoformat

" rainbow

let g:rainbow_active = 1 " 0 if you want to enable it later via :RainbowToggle

" auto-format python code
let g:black_linelength = 100 " OneCodex style
autocmd BufWritePre *.py execute ':Black'
autocmd BufWritePre *.ts execute ':Prettier'

command Align execute ':%!muscle -quiet -in %'
command Fold execute ':%!fold -w 60 -s %'

" python-syntax
let g:python_highlight_all = 1
let g:lightline = { 'colorscheme': 'nightowl' }
" flake8
"autocmd BufWritePost *.py call flake8#Flake8()

" vim-night-owl
"
set background=dark
colorscheme night-owl
if (has("termguicolors"))
 set termguicolors
endif

" auto-format rust code
" autocmd BufWritePre *.rs execute ':%!rustfmt'
" auto-wrap at line 80 for certain filetypes
au BufReadPost,BufNewFile *.md,*.txt set tw=79

" CtrlP
let g:UltiSnipsNoPythonWarning = 1 " silence python version warnings
let g:ctrlp_map = '<c-p>'
let g:ctrlp_cmd = 'CtrlP'
set wildignore+=*/tmp/*,*.so,*.swp,*.zip,*pyc,node_modules
let g:ctrlp_custom_ignore = {
  \ 'dir':  '\v[\/](\.git|vendor|\.hg|\.svn|build|venv)$',
  \ 'file': '\v\.(exe|so|dll|png|jpeg|jpg|gif|pdf)$',
  \ }
let g:ctrlp_max_files=10000

"
" Mappings
"

" Wrap selection
nnoremap <leader>W :set wrap!<cr>
